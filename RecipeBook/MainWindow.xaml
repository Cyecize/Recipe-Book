<Window x:Class="RecipeBook.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:RecipeBook"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:controls="clr-namespace:RecipeBook.Controls"
        mc:Ignorable="d"
        Title="Recipe Book" Height="600" Width="1200">
    <Grid>
        <!-- Row 0 - navbar, Row 1 - content  -->
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Authenticator.IsLoggedIn}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <!-- Not specifying data context for navbar, therefore it uses the same context as this file - MainViewModel. -->
            <controls:NavBar/>
        </Grid>

        <!-- Bound to CurrentViewModel, on change the new view model name will be shown.  -->
        <!-- In App.xaml there is mapping so instead of name, the corresponding view will be shown.  -->
        <!-- Navigator property is coming from MainViewModel and this file is aware of MainViewModel because it is set in App.xaml.cs -->
        <!-- This is how when you create a new view, you automatically get associated with it's view model.-->
        <ContentControl Grid.Row="1" Content="{Binding Navigator.CurrentViewModel}"/>
    </Grid>
</Window>
